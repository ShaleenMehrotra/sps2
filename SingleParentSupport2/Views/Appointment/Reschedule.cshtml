@model AppointmentViewModel

@section Styles {
    <link rel="stylesheet" href="~/css/pages/reschedule.css" />
}

@{
    ViewData["Title"] = "Reschedule Appointment";
    Layout = "_Layout";

    int month = Context.Request.Query["month"].Count > 0 ? int.Parse(Context.Request.Query["month"]) : DateTime.Now.Month;
    int year = Context.Request.Query["year"].Count > 0 ? int.Parse(Context.Request.Query["year"]) : DateTime.Now.Year;
    DateTime currentDate = new DateTime(year, month, 1);
}

<div class="container appointment-container">
    <div class="appointment-form">
        <h2>Reschedule Appointment</h2>
        <p>Select a new date, time, and volunteer to reschedule your appointment.</p>

        <form asp-action="Reschedule" method="post">
            <input type="hidden" asp-for="AppointmentId" />
            <div class="validation-summary-errors" asp-validation-summary="All" style="display:none;"></div>

            <div class="calendar-container">
                <div class="calendar-header">
                    <div class="calendar-title">@currentDate.ToString("MMMM yyyy")</div>
                    <div class="calendar-nav">
                        @{
                            var prev = currentDate.AddMonths(-1);
                            var next = currentDate.AddMonths(1);
                        }
                        <a class="calendar-nav-btn" asp-controller="Appointment" asp-action="Reschedule"
                           asp-route-month="@prev.Month" asp-route-year="@prev.Year" asp-route-id="@Model.AppointmentId" title="Previous Month">
                            <i class="bi bi-chevron-left"></i>
                        </a>
                        <a class="calendar-nav-btn" asp-controller="Appointment" asp-action="Reschedule"
                           asp-route-month="@next.Month" asp-route-year="@next.Year" asp-route-id="@Model.AppointmentId" title="Next Month">
                            <i class="bi bi-chevron-right"></i>
                        </a>
                    </div>
                </div>

                <div class="calendar-grid">
                    <div class="calendar-day-header">Sun</div>
                    <div class="calendar-day-header">Mon</div>
                    <div class="calendar-day-header">Tue</div>
                    <div class="calendar-day-header">Wed</div>
                    <div class="calendar-day-header">Thu</div>
                    <div class="calendar-day-header">Fri</div>
                    <div class="calendar-day-header">Sat</div>

                    @{
                        var firstOfMonth = new DateTime(year, month, 1);
                        var daysInMonth = DateTime.DaysInMonth(year, month);
                        int startDayOfWeek = (int)firstOfMonth.DayOfWeek;

                        var prevMonthDate = firstOfMonth.AddMonths(-1);
                        int daysInPrevMonth = DateTime.DaysInMonth(prevMonthDate.Year, prevMonthDate.Month);
                        int totalSlots = 42;

                        for (int i = 0; i < totalSlots; i++)
                        {
                            DateTime cellDate;
                            string cssClass = "calendar-day";

                            if (i < startDayOfWeek)
                            {
                                int day = daysInPrevMonth - startDayOfWeek + i + 1;
                                cellDate = new DateTime(prevMonthDate.Year, prevMonthDate.Month, day);
                                cssClass += " other-month";
                            }
                            else if (i >= startDayOfWeek + daysInMonth)
                            {
                                int day = i - (startDayOfWeek + daysInMonth) + 1;
                                var nextMonthDate = firstOfMonth.AddMonths(1);
                                cellDate = new DateTime(nextMonthDate.Year, nextMonthDate.Month, day);
                                cssClass += " other-month";
                            }
                            else
                            {
                                int day = i - startDayOfWeek + 1;
                                cellDate = new DateTime(year, month, day);
                            }

                            <div class="@cssClass">
                                <div class="calendar-day-number" data-day="@cellDate.ToString("yyyy-MM-dd")">
                                    @cellDate.Day
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>

            <div class="form-group mt-3">
                <label class="form-label">Selected Date</label>
                <input type="date" id="selected-date" name="AppointmentDate" class="form-control" readonly required>
            </div>

            <div class="form-group mt-3">
                <label asp-for="VolunteerId" class="form-label">Select Volunteer</label>
                <select asp-for="VolunteerId" class="form-select">
                    <option value="a6cef287-368e-4590-97d7-4ecd8ded38c0">John Doe</option>
                    <option value="9c5e771c-0c84-4ff9-b6cc-b821b245eaa1">Sarah Johnson</option>
                    <option value="227f1609-a235-4d1c-884a-aefb1fa542d0">Michael Brown</option>
                </select>
                <span asp-validation-for="VolunteerId" class="text-danger small"></span>
            </div>

            <div class="form-group mt-3">
                <label class="form-label">Available Time Slots</label>
                <div class="time-slots">
                    <!-- Time slots will be populated dynamically here -->
                </div>
                <input type="hidden" id="selected-time" name="AppointmentTime" required>
            </div>

            <div class="form-group mt-3">
                <label asp-for="Purpose" class="form-label">Purpose</label>
                <textarea asp-for="Purpose" class="form-control" rows="3"></textarea>
                <span asp-validation-for="Purpose" class="text-danger small"></span>
            </div>

            <div class="d-flex justify-content-end mt-4">
                <button type="submit" class="btn btn-outline-primary px-4">
                    <i class="bi bi-calendar-check"></i> Confirm Reschedule
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const dateInput = document.getElementById("selected-date");
            const timeInput = document.getElementById("selected-time");

            const calendarDays = document.querySelectorAll('.calendar-day:not(.other-month)');

            calendarDays.forEach(day => {
                day.addEventListener('click', function () {
                    // Remove selected class from all days
                    calendarDays.forEach(d => d.classList.remove('selected'));

                    // Add selected class to clicked day
                    this.classList.add('selected');

                    const dayNumber = parseInt(this.querySelector('.calendar-day-number').textContent);

                    // Extract month and year from the calendar title (e.g., "March 2025")
                    const [monthName, year] = document.querySelector('.calendar-title').textContent.split(' ');
                    const monthIndex = new Date(`${monthName} 1, ${year}`).getMonth(); // 0-based

                    // Create proper ISO date string (yyyy-MM-dd)
                    const date = new Date(year, monthIndex, dayNumber);
                    const localDate = new Date(date.getTime() - date.getTimezoneOffset() * 60000);
                    const isoDate = localDate.toISOString().split('T')[0];

                    // Set input value
                    dateInput.value = isoDate;

                    // Trigger change event in case there is a listener
                    $('#selected-date').trigger('change');
                });
            });
        });

        $(document).ready(function () {

            function getSelectedVolunteerId() {
                return $('#VolunteerId').val();
            }

            function getSelectedDate() {
                return $('#selected-date').val();
            }

            function tryFetchAvailableTimes() {
                const volunteerId = getSelectedVolunteerId();
                const date = getSelectedDate();

                if (volunteerId && date) {
                    fetchAvailableTimes(volunteerId, date);
                }
            }

            // On date change
            $('#selected-date').on('change', function () {
                tryFetchAvailableTimes();
            });

            // On volunteer change
            $('#VolunteerId').on('change', function () {
                tryFetchAvailableTimes();
            });

            // Fetch available time slots from server
            function fetchAvailableTimes(volunteerId, date) {
                $.ajax({
                    url: '@Url.Action("GetAvailableTime", "Appointment")',
                    data: { volunteerId: volunteerId, date: date },
                    success: function (data) {
                        $('.time-slots').empty();

                        // Generate time slots between 9:00 and 21:00
                        for (let hour = 9; hour <= 21; hour++) {
                            const timeStr = (hour < 10 ? "0" + hour : hour) + ":00";
                            const isAvailable = data.some(slot => slot.time === timeStr && slot.isAvailable);

                            const timeSlot = $('<div>')
                                .addClass('time-slot')
                                .attr('data-time', timeStr)
                                .text(formatTime(timeStr));

                            if (!isAvailable) {
                                timeSlot.addClass('unavailable');
                            }

                            $('.time-slots').append(timeSlot);
                        }
                    },
                    error: function () {
                        alert("Error fetching available times.");
                    }
                });
            }

            // Delegated click handler for time slots
            $('.time-slots').on('click', '.time-slot:not(.unavailable)', function () {
                $('.time-slot').removeClass('selected');
                $(this).addClass('selected');
                $('#selected-time').val($(this).data('time'));
            });


            // Helper to format time like "09:00" → "9:00 AM"
            function formatTime(time) {
                const [hourStr, minute] = time.split(':');
                let hour = parseInt(hourStr);
                const ampm = hour >= 12 ? 'PM' : 'AM';
                if (hour > 12) hour -= 12;
                if (hour === 0) hour = 12;
                return `${hour}:${minute} ${ampm}`;
            }
        });
    </script>
}
